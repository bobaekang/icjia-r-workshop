# template elements
<div class="header"></div>
<div class="footer"></div>
<img src="../images/icjia.png" class="logo"></img>
<img src="../images/il_seal.gif" class="seal"></img>
<div class="buttons">
<a href="../index.html">
  <button type="button">Home</button>
</a>
<a href="../modules.html">
  <button type="button">Modules</button>
</a>
<a href="../notes/module3_notes1.html">
  <button type="button">Notes</button>
</a>
</div>
<link href="https://fonts.googleapis.com/css?family=Oswald" rel="stylesheet">


# presentation
R Workshop
========================================================
type: slide-body
css: ../css/style_slides.css
<h3 style="color: #789">Module 3: Data analysis with R (1)</h3>  
2018-03-28  
Bobae Kang  
<small>(Bobae.Kang@illinois.gov)</small>


Agenda
========================================================
<div style="text-align:center; margin-top:10%;">
<ul style="list-style: none">
<li style="color: #00061a; font-size: 1.1em; font-weight:700">
  Part 1: Getting started with tidyverse</li>
<li>
  Part 2: More on data analysis</li>
</div>


Getting Started with tidyverse
========================================================
type:section
```{r echo=FALSE, out.width="20%", out.extra='style="box-shadow: none; margin-left: 20%"'}
images <- c("../images/dplyr.png", "../images/tidyr.png")
include_graphics(images)
```
<div style="font-size:0.5em; text-align:center; color: #777;">
Source: <a href="https://www.tidyverse.org/">tidyverse.org</a>
</div>


Installing the packages
========================================================
* Installing all tidyverse packages can be easily done with the follwoing command:
```{r eval=FALSE}
# Install from CRAN
install.packages("tidyverse")

# Or the development version from GitHub
# install.packages("devtools")
devtools::install_github("hadley/tidyverse")
```


========================================================
* Installing `tidyverse` package installs the following:
    * core tidyverse packages
        * `ggplot2`, `dplyr`, `tidyr`, `readr`, `purrr`, `tibble`
    * packages to work with specific vector types 
        * `hms`, `stringr`, `lubridate`, `forcats`
    * packages to import data
        * `feather`, `haven`, `httr`, `jsonlite`, `readxl`, `rvest`, `xml2`
    * packages to facilitate statistical modeling
        * `modelr`, `broom`


========================================================
* Of course, each pacakge can be installed separately:
```{r eval=FALSE}
# Install ggplot2
install.packages("ggplot2")

# Install both dplyr and tidyr with a single commend
#   with a character vector of the package names 
install.packages(c("dplyr", "tidyr"))
```


Importing the packages
========================================================
* Once installed, we can now import the packages using `library()`:
```{r eval=FALSE}
# This imports the core tidyverse packages
library(tidyverse)

# Or import packages separately
library(dplyr)
library(tidyr)
```


Manipulating Your Data
========================================================
type:section
```{r echo=FALSE, out.width="25%", out.extra='style="box-shadow: none; display: block; margin: auto;"'}
include_graphics(images[1])
```
<div style="font-size:0.5em; text-align:center; color: #777;">
Source: <a href="https://www.tidyverse.org/">tidyverse.org</a>
</div>


Key dplyr functions
========================================================
<br>
* `arange()`
* `select()` `rename()`
* `filter()`
* `mutate()` `trasmute()`

***
<br>
* `left_join()`
* `summarise()`
* `group_by()` `ungroup()`
* `%>%`, the pipe operator


Sort rows by variables
========================================================
**Basic format**
```{r eval=FALSE}
arrange(tbl, col1, desc(col2), ...)
```
* A tabular data object (e.g. `data.frame` or `tibble`) as the first argument
* Columns by which to sort the data as other arguments
    * Multiple columns can be used to sort the data
    * When multiple columns are given, sorting is done hierarchically
    * Sorting in a descending order with `desc()`


========================================================
**Example**
```{r echo=FALSE}
library(dplyr)
library(icjiar)
```

```{r eval=FALSE}
# sort by county
arrange(ispcrime, county)
```

```{r echo=FALSE}
ispcrime %>%
  arrange(county) %>%
  head()
```


========================================================
```{r eval=FALSE}
# sort by county and year, in a DESCENDING order
arrange(ispcrime, desc(county), desc(year))
```

```{r echo=FALSE}
ispcrime %>%
  arrange(desc(county)) %>%
  head() 
```


Filter rows with conditions
========================================================
**Basic format**
```{r eval=FALSE}
filter(tbl, condition1, condition2, ...)
```
* A tabular data object as the first argument
* Conditions by which to filter the data as the following arguments

========================================================
**Example**
```{r}
ispcrime %>%
  filter(
    year == 2015,
    murder > 0
  ) %>%
  head()
```


Select and/or rename variables
========================================================
**Basic format**
```{r eval=FALSE}
select(tbl, col1, var2 = col2, ...)
```
* A tabular data object as the first argument
* Columns to select as the following arguments
    * Renaming each selected column is possible

========================================================
**Example**
```{r}
ispcrime %>%
  select(year:violentCrime, propertyCrime) %>%
  head()
```


Transform and add variables
========================================================
**Basic format**
```{r eval=FALSE}
mutate(tbl, col1 = expression, new_col1 = expression, ...)
```
* A tabular data object as the first argument
* Expressions to "mutate" columns as the following arguments
    * An exisiting column is modified with an expression with the same column name
    * A new column is created with an expression having a new column name

========================================================
**Example**
```{r}
ispcrime %>%
  mutate(totalCrime = violentCrime + propertyCrime) %>%
  head()
```

Merge tables
========================================================
**Basic format**
```{r eval=FALSE}
left_join(tbl1, tbl2, by = c("variables to join by"), ...)
```
* Tabular data objects to join as the first two arguments
* A character vector of variable to join by as the third argument
* Other types of join: `inner_join()`, `right_join()`, `semi_join()`, `anti_join()`, `full_join()`


========================================================
**Example**
```{r}
ispcrime %>%
  left_join(regions, by = "county") %>%
  head()
```


Aggregate and summarise rows
========================================================
**Basic format**
```{r eval=FALSE}
summarise(tbl, summary1 = expression, summary2 = expression, ...)
```
* A data object (table) as the first argument
* Expressions to summarise data as the following arguments


========================================================
**Example**
```{r}
ispcrime %>%
  summarise(
    violentCrimeAverage = mean(violentCrime, na.rm = TRUE),
    propertyCrimeAverage = mean(propertyCrime, na.rm = TRUE)
  )
```


Group by variables
========================================================
**Basic format**
```{r eval=FALSE}
group_by(tbl, col1, col2, ...)
```
* A data object as the first argument
* Columns by which to group the data as the following arguments

* Can be used in combination with other function to allow for group-specific data manipulations


========================================================
**Example**
```{r}
ispcrime %>%
  group_by(year)
```


========================================================
```{r}
ispcrime %>%
  group_by(year) %>%
  summarise(
    violentCrimeAverage = mean(violentCrime, na.rm = TRUE),
    propertyCrimeAverage = mean(propertyCrime, na.rm = TRUE)
  )
```


Chain operations
========================================================
**Basic format**
```{r eval=FALSE}
data %>% some_function(arg2, arg3, ...) %>% ...
```
* A data object to be manipulated comes before `%>%`
* Some function that *takes the data as the first argument* comes after `%>%`
    * The object before `%>%` is provided to the function as its first argument
* Multiple functions can be chained, or "piped"


========================================================
**Comparison**
```{r eval=FALSE}
# piping style
object %>%
  function1(arguments1) %>%
  function2(arguments2) %>%
  function3(arguments3)


# traditional style
function3(
  function2(
    function1(
      object,
      arguments1
    ),
    arguments2
  ),
  arguments3  
  
)

# or
function3(function2(function1(object, arguments1), arguments2), arguments3)

```


dplyr in action
========================================================
**Example 1**
```{r}
ispcrime %>%
  filter(substr(county, 1, 1) == "D", year %in% c(2014, 2015)) %>%
  mutate(totalCrime = violentCrime + propertyCrime) %>%
  select(year, county, totalCrime)
```


========================================================
**Example 2**
```{r}
ispcrime %>%
  group_by(county) %>%
  summarise(annualAvgCrime = sum(violentCrime, propertyCrime, na.rm = TRUE) / n()) %>%
  arrange(desc(annualAvgCrime))
```


More on dplyr
========================================================
* `dplyr` on [tidyverse.org](http://dplyr.tidyverse.org/)
* `dplyr` [CRAN documentation](https://cran.r-project.org/web/packages/dplyr/dplyr.pdf)
* `dplyr` [Github repository](https://github.com/tidyverse/dplyr)


Tidying Up Your Data
========================================================
type:section
```{r echo=FALSE, out.width="25%", out.extra='style="box-shadow: none; display: block; margin: auto;"'}
include_graphics(images[2])
```
<div style="font-size:0.5em; text-align:center; color: #777;">
Source: <a href="https://www.tidyverse.org/">tidyverse.org</a>
</div>


Key tidyr functions
========================================================
* `gather()`
* `spread()`
* `separate()`
* `extract()`
* `unite()`


Fix "wide" data
========================================================
**Basic format**
```{r eval=FALSE}
gather(tbl, key = "key", value = "value", ...)
```
* A tabular data object (e.g. `data.frame` or `tibble`) as the first argument


========================================================
**Example**
```{r}

```


Fix "long" data
========================================================
**Basic format**
```{r eval=FALSE}
spread(tbl, key, value, fill = NA, ...)
```
* A tabular data object as the first argument


========================================================
**Example**
```{r}

```


Split a column into many
========================================================
**Basic format**
```{r eval=FALSE}
separate(tbl, col, into, sep = "", remove = TRUE, ...)
```
* A tabular data object as the first argument


========================================================
**Example**
```{r}

```


Unite multiple columns into one
========================================================
**Basic format**
```{r eval=FALSE}
unite(tbl, col, ..., sep = "_", remove = TRUE)
```
* A tabular data object as the first argument


========================================================
**Example**
```{r}

```


Extract a column into many
========================================================
**Basic format**
```{r eval=FALSE}
extract(tbl, col, into, regex, remove = TRUE, ...)
```
* A tabular data object as the first argument


========================================================
**Example**
```{r}

```


More on tidyr
========================================================
* `tidyr` on [tidyverse.org](http://tidyr.tidyverse.org/)
* `tidyr` [CRAN documentation](https://cran.r-project.org/web/packages/tidyr/tidyr.pdf)
* `tidyr` [Github repository](https://github.com/tidyverse/tidyr)


Data manipulation with dplyr and tidyr
========================================================
**Example 1**
```{r}

```


Questions?
========================================================
type: section
```{r echo=FALSE, out.width="50%", out.extra='style="display: block; margin: auto; box-shadow: none;"'}
include_graphics("https://media.giphy.com/media/106cqwD4WrDjJm/giphy.gif")
```
<p style="font-size:0.5em; text-align:center; color: #777;">
Source: <a href="https://media.giphy.com/media/106cqwD4WrDjJm/giphy.gif">giphy.com</a>
</p>


========================================================
References
<ul style="font-size: 0.6em">
  <li>RStudio. (2017). <a href="https://www.rstudio.com/resources/cheatsheets/">"Data Import Cheat Sheet"</a>.</li>
  <li>RStudio. (2017). <a href="https://www.rstudio.com/resources/cheatsheets/">"Data Transformation Cheat Sheet"</a>.</li>
  <li>Tidyverse. (n.d.). <a href="http://dplyr.tidyverse.org/"><span style="font-style:italic">dplyr.tidyverse.org</span></a>.</li>
  <li>Tidyverse. (n.d.). <a href="http://tidyr.tidyverse.org/"><span style="font-style:italic">tidyr.tidyverse.org</span></a>.</li>
  <li>Tidyverse. (n.d.). <a href="http://www.tidyverse.org/"><span style="font-style:italic">tidyverse.org</span></a>.</li>
</ul>


========================================================
type: section
```{r echo=FALSE, out.width="45%", out.extra='style="display: block; margin: auto; box-shadow: none;"'}
include_graphics("https://upload.wikimedia.org/wikipedia/commons/thumb/e/e3/Ic_pause_circle_outline_48px.svg/2000px-Ic_pause_circle_outline_48px.svg.png")
```
<p style="font-size:0.5em; text-align:center; color: #777;">
Source: <a href="https://www.wikimedia.org">Wikimedia.org</a>
</p>


